<project name="Reports" default="dist">

  <property file="build.properties" />

  <property name="project.path" value="${basedir}/.." />

  <path id="dir.classpath">
    <fileset dir="${project.path}/${lib.dir.1}" includes="*.jar" />
    <fileset dir="${project.path}/${lib.dir.2}" includes="**/*.jar" />
  </path>

  <!-- Globale Properties -->
  <property name="workspace" value="${basedir}/.." />

  <property name="src.dir" location="${project.path}/jar/src" />
  <property name="dir.tempBase" location="${user.home}/_reports-build-${version}" />
  <property name="dir.temp" location="${dir.tempBase}/temp" />
  <property name="dir.tempProc" location="${dir.tempBase}/tempProc" />
  <property name="bin.dir" location="${dir.temp}/classes" />

  <!-- Ziel- bzw. Quellnamen -->
  <property name="cd" location="${project.path}/dist" />
  <property name="jar.dest" location="${cd}/qs-intrexx-reports-${version}.jar" />
  <property name="doc.zip.dest" location="${cd}/qs-intrexx-reports-doc-${version}.zip" />
  <property name="cd.dest" location="${cd}/Intrexx_Reports_${version}.zip" />
  <property name="cd.dest.releaseTools" location="${cd}/Intrexx_Reports_ReleaseTools_${version}.zip" />
  <property name="application.dest" location="${cd}/Intrexx_Reports_Applikation_${version}.zip" />
  <property name="doc.dest" location="${project.path}/doc" />
  <property name="cd.netdrive" location="Q:/02-Produkte/Reports für Intrexx/3_Releases/Intrexx ${intrexx_version}/${version}" />

  <target name="pushToNetDrive">
    <delete dir="${cd.netdrive}" />
    <mkdir dir="${cd.netdrive}" />
    <copy todir="${cd.netdrive}">
      <fileset dir="${cd}" includes="*" />
    </copy>
  </target>

  <target name="dist" depends="compile, application, cd, releaseTools, pushToNetDrive" description="Erstellt ein normales, neues Release." />
  <target name="redist" depends="delete, compile, application, cd, releaseTools" description="Überschreibt ein vorhandenes Release zu Testzwecken mit Sicherheitsabfrage." />

  <target name="delete" description="Löscht das Release mit der aktuellen Versionsnummer.">
    <input message="Hiermit wird das aktuelle Release gelöscht, was nur mit Testversionen vor dem Release gemacht werden sollte. Wollen Sie wirklich die Löschung aller Ergebnisse (JAR, ZIP, ...)?" validargs="Loeschen,Beibehalten" addproperty="delete" />
    <condition property="abort">
      <equals arg1="Beibehalten" arg2="${delete}" />
    </condition>
    <fail if="abort">Build abgebrochen wegen Benutzereingabe.</fail>
    <delete file="${jar.dest}" />
    <delete file="${doc.zip.dest}" />
    <delete file="${cd.dest}" />
    <delete file="${application.dest}" />
  </target>

  <target name="doc" description="Erzeugt die JavaDoc-Dokumentation.">
    <javadoc executable="${project.path}/build/javadoc/javadoc.exe" sourcepath="${src.dir}" classpathref="dir.classpath" destdir="${doc.dest}/javadoc" doctitle="Intrexx Reports - Version ${version}" access="public" author="true" nodeprecated="false" nodeprecatedlist="false" noindex="false" nonavbar="false" notree="false" source="${src.version}" splitindex="true" use="true" version="true" encoding="UTF-8" charset="UTF-8" docencoding="UTF-8" failonerror="true" />
    <zip destfile="${doc.zip.dest}">
      <fileset dir="${doc.dest}/javadoc" includes="**/*" />
    </zip>
  </target>

  <target name="compile" description="Kompiliert die Java-Klassen und erzeugt das JAR-Archiv.">
    <available file="${jar.dest}" property="exists" />
    <fail message="Das JAR-Release ${jar.dest} existiert bereits. Bitte die Versionsnummer (build.properties) überprüfen. Alternativ - wenn sinnvoll - gibt es im Buildscript die Möglichkeit eines Redist." if="exists" />
    <copy todir="${dir.temp}/src" overwrite="true">
      <fileset dir="${src.dir}" />
    </copy>
    <replace dir="${dir.temp}/src" token="@reports-version@" value="${version}" />
    <mkdir dir="${bin.dir}" />
    <javac classpathref="dir.classpath" srcdir="${dir.temp}/src" destdir="${bin.dir}" encoding="cp1252" source="${src.version}" target="${src.version}" debuglevel="lines,vars,source" debug="true" includeantruntime="no" />
    <copy todir="${bin.dir}" overwrite="true">
      <fileset dir="${dir.temp}/src">
        <exclude name="**/*.java" />
      </fileset>
    </copy>
    <jar destfile="${jar.dest}" basedir="${bin.dir}" />
    <delete dir="${dir.temp}" />
  </target>

  <target name="application" description="Erstellt die Hauptapplikation mit den Libraries.">
    <available file="${application.dest}" property="exists" />
    <fail message="Die Applikations ${application.dest} existiert bereits. Bite die Versionsnummer (build.properties) überprüfen. Alternativ - wenn sinnvoll - gibt es im Buildscript die Möglichkeit eines Redist." if="exists" />
    <unzip dest="${dir.temp}" src="${project.path}/portal/app/Intrexx_Reports.zip" />
    <!-- Ressourcen für Installation in Prozess kopieren -->
    <unzip dest="${dir.tempProc}" src="${dir.temp}/Intrexx_Reports.ixpr" />
    <copy todir="${dir.tempProc}/F8646A62D00F3013B0AF0CA7D9E589B623964F27/velocity/install" overwrite="true">
      <fileset dir="${project.path}/portal">
        <include name="internal/**" />
        <include name="external/**" />
        <!-- bereits in Applikationspaket enthalten -->
        <exclude name="internal/cfg/callables/**" />
        <exclude name="lib/**" />
        <!-- -->
      </fileset>
    </copy>
    <replace dir="${dir.tempProc}" includes="**/*.xml, **/*.vm" token="@reports-version@" value="${version}" />
    <delete file="${dir.temp}/Intrexx_Reports.ixpr" />
    <zip destfile="${dir.temp}/Intrexx_Reports.ixpr" basedir="${dir.tempProc}" />

    <copy todir="${dir.temp}/lib/extensions/qs-reports-${version}" overwrite="true">
      <fileset dir="${project.path}/portal/lib" includes="**" />
    </copy>
    <copy todir="${dir.temp}/internal/cfg/callables" overwrite="true">
      <fileset dir="${project.path}/portal/internal/cfg/callables" includes="**" />
    </copy>
    <copy todir="${dir.temp}/lib/extensions/qs-reports-${version}" overwrite="true" file="${project.path}/dist/qs-intrexx-reports-${version}.jar" />
    <zip destfile="${application.dest}" basedir="${dir.temp}" />
    <delete dir="${dir.temp}" />
  </target>

  <target name="releaseTools" description="Packt die Werkzeuge zusammen, die ein Entwickler fürs Testen eines Releases braucht">
    <delete file="${cd.dest.releaseTools}" />
    <zip destfile="${cd.dest.releaseTools}">
      <fileset dir="${project.path}/test" includes="reports/**/*" />
      <fileset dir="${project.path}/test/ReleaseTools" includes="**/*" />
    </zip>
  </target>

  <target name="cd" description="Erstellt die CD.">
    <available file="${cd.dest}" property="exists" />
    <fail message="Das CD-Release ${cd.dest} existiert bereits. Bitte die Versionsnummer (build.properties) überprüfen. Alternativ - wenn sinnvoll - gibt es im Buildscript die Möglichkeit eines Redist." if="exists" />
    <copy todir="${dir.temp}/Ressourcen" overwrite="true">
      <fileset dir="${project.path}/build" includes="Skripte*/**" />
      <fileset dir="${project.path}/build" includes="Beispielreports/**" />
    </copy>
    <copy todir="${dir.temp}" overwrite="true" failonerror="true" file="${project.path}/doc/Reports für Intrexx ${intrexx_version} Handbuch.pdf" />
    <copy todir="${dir.temp}" overwrite="true" failonerror="true" file="${application.dest}" />
    <replace dir="${dir.temp}" includes="*.html, *.bat, *.sh" token="@reports-version@" value="${version}" />
    <zip destfile="${cd.dest}" basedir="${dir.temp}" />
    <delete dir="${dir.tempBase}" />
  </target>

  <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
    <classpath>
      <fileset dir="lib/jaxb" includes="*.jar" />
    </classpath>
  </taskdef>
  <target name="jaxb_classes" description="Erstelle die Klassen zu den Schemata.">
    <xjc source="" />
  </target>

</project>